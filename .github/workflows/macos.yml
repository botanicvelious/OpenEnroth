name: MacOS

on:
  pull_request: null
  workflow_dispatch:
    inputs:
      myCommit:
        description: Commit SHA1
        required: false
        default: ''
        type: string
      releaseTag:
        description: Release tag
        required: false
        default: ''
        type: string
  workflow_call:
    inputs:
      myCommit:
        description: Commit SHA1
        required: false
        default: ''
        type: string
      releaseTag:
        description: Release tag
        required: false
        default: ''
        type: string
  push: null
  release:
    types:
      - published

jobs:
  build_macos:
    runs-on: macos-14
    timeout-minutes: 60
    strategy:
      fail-fast: false
      matrix:
        configuration:
          - Debug
          - Release
        architecture:
          - x86_64
          - arm64
    steps:
      - name: Set up Xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: 14.3

      - name: Checkout
        uses: actions/checkout@v3
        with:
          submodules: recursive
          ref: '${{inputs.myCommit}}'

      - name: Install the Apple certificate and provisioning profile
        if: ${{ (env.BUILD_CERTIFICATE_BASE64 == 'true') && (env.P12_PASSWORD == 'true') && (env.BUILD_PROVISION_PROFILE_BASE64 == 'true') && (env.KEYCHAIN_PASSWORD == 'true') }}
        env:
          BUILD_CERTIFICATE_BASE64: ${{ secrets.BUILD_CERTIFICATE_BASE64 }}
          P12_PASSWORD: ${{ secrets.P12_PASSWORD }}
          BUILD_PROVISION_PROFILE_BASE64: ${{ secrets.BUILD_PROVISION_PROFILE_BASE64 }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
        run: |
          # create variables
          CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
          PP_PATH=$RUNNER_TEMP/build_pp.provisionprofile
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db

          # import certificate and provisioning profile from secrets
          echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode -o $CERTIFICATE_PATH
          echo -n "$BUILD_PROVISION_PROFILE_BASE64" | base64 --decode -o $PP_PATH

          # create temporary keychain
          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

          # import certificate to keychain
          security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security set-key-partition-list -S apple-tool:,apple: -k "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH

          # apply provisioning profile
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          cp $PP_PATH ~/Library/MobileDevice/Provisioning\ Profiles

      - name: Restore data cache
        id: restore-data-cache
        uses: actions/cache/restore@v3
        with:
          path: |
            OpenEnroth_GameData
          key: data-cache

      - name: Copy shaders
        if: steps.restore-data-cache.outputs.cache-hit == 'true'
        run: |
          cp -r ./resources/shaders ./OpenEnroth_GameData/mm7

      - name: Run ccache
        uses: hendrikmuhs/ccache-action@v1.2.10
        with:
          key: 'macos-${{matrix.configuration}}-${{matrix.architecture}}'
          save: ${{ github.ref == 'refs/heads/master' || inputs.releaseTag != '' }}
          verbose: 2
          max-size: 100M

      # MacOS deployment target here should be kept in sync with what's set in OpenEnroth_Dependencies:
      # https://github.com/OpenEnroth/OpenEnroth_Dependencies/blob/master/scripts/build_all.sh
      - name: Configure
        run: |
          if [ "${{matrix.architecture}}" = "x86_64" ]; then
            export MACOSX_DEPLOYMENT_TARGET="10.15"
          fi
          if [ "${{matrix.architecture}}" = "arm64" ]; then
            export MACOSX_DEPLOYMENT_TARGET="11"
          fi
          cmake -B build -G "Unix Makefiles" -DCMAKE_BUILD_TYPE=${{matrix.configuration}} -DCMAKE_OSX_ARCHITECTURES=${{matrix.architecture}} -DTEAM_ID=${{ secrets.TEAM_ID }}
                  
      - name: Build
        working-directory: build
        run: |
          make -j4

      - name: Run unit tests
        working-directory: build
        run: |
          make UnitTest

      # TODO(captainurist): arm64 tests are broken, disabled for now
      - name: Run game tests
        if: steps.restore-data-cache.outputs.cache-hit == 'true' && matrix.architecture != 'arm64'
        working-directory: build
        run: |
          make GameTest_Headless
        env:
          OPENENROTH_MM7_PATH: /Users/runner/work/OpenEnroth/OpenEnroth/OpenEnroth_GameData/mm7

      - name: Run retrace tests
        if: steps.restore-data-cache.outputs.cache-hit == 'true' && matrix.configuration == 'Release' && matrix.architecture != 'arm64'
        working-directory: build
        run: |
          make RetraceTest_Headless
        env:
          OPENENROTH_MM7_PATH: /Users/runner/work/OpenEnroth/OpenEnroth/OpenEnroth_GameData/mm7

      - name: Prepare files for release
        run: |
          mkdir dist
          cp -r build/src/Bin/OpenEnroth/OpenEnroth.app dist/
          cp -r resources/* dist/
          hdiutil create OpenEnroth.dmg -ov -volname "OpenEnroth" -fs HFS+ -srcfolder dist

      - name: Zip folder for release
        if: inputs.releaseTag != ''
        uses: thedoctor0/zip-release@0.7.1
        with:
          type: zip
          filename: ${{runner.os}}_${{inputs.releaseTag}}_${{matrix.configuration}}_${{matrix.architecture}}.zip
          path: dist

      - name: Publish release
        if: inputs.releaseTag != ''
        uses: softprops/action-gh-release@v1
        with:
          prerelease: true
          tag_name: '${{inputs.releaseTag}}'
          files: |
            ${{runner.os}}_${{inputs.releaseTag}}_${{matrix.configuration}}_${{matrix.architecture}}.zip

      - name: Check dependencies
        run: |
          otool -L build/src/Bin/OpenEnroth/OpenEnroth.app/Contents/MacOS/OpenEnroth

      - name: Cleanup ccache
        run: |
          ccache -c

      - name: Clean up keychain and provisioning profile
        if: ${{ always() }}
        run: |
          security delete-keychain $RUNNER_TEMP/app-signing.keychain-db
          rm ~/Library/MobileDevice/Provisioning\ Profiles/build_pp.mobileprovision          
